import os
import sys


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(BASE_DIR)

# add your model's MetaData object here
# for 'autogenerate' support
from logging.config import fileConfig

from alembic import context
from alembic_utils.replaceable_entity import register_entities
# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
from db import DeclarativeBase
from dotenv import load_dotenv
from migrations.autogenerated_tables import autogenerated_tables
from migrations.registered_entities import registered_entities
from sqlalchemy import engine_from_config, pool


load_dotenv()

from webtronics.settings import SETTINGS  # noqa


config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

#  your models
_ = autogenerated_tables
#
register_entities(registered_entities)

# target_metadata = mymodel.Base.metadata
target_metadata = DeclarativeBase.metadata


# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    context.configure(
        url=SETTINGS.get_sync_database_uri(),
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    alembic_config = config.get_section(config.config_ini_section)
    alembic_config['sqlalchemy.url'] = SETTINGS.get_sync_database_uri()
    connectable = engine_from_config(
        alembic_config,
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection, target_metadata=target_metadata
        )
        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
