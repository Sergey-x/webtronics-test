"""Add triggers

Revision ID: 2f1fa7648f7f
Revises: 2a9e00b8cee6
Create Date: 2023-07-05 11:27:27.396634

"""
import sqlalchemy as sa
from alembic import op
from alembic_utils.pg_function import PGFunction
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text


# revision identifiers, used by Alembic.
revision = '2f1fa7648f7f'
down_revision = '2a9e00b8cee6'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_after_insert_like = PGFunction(
        schema="public",
        signature="after_insert_like()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE posts SET likes = likes + 1 WHERE id = NEW.post_id;\n            RETURN NEW;\n        END\n        $$ LANGUAGE 'plpgsql'"
    )
    op.replace_entity(public_after_insert_like)

    public_likes_after_insert_like_trigger = PGTrigger(
        schema="public",
        signature="after_insert_like_trigger",
        on_entity="public.likes",
        is_constraint=False,
        definition='AFTER INSERT ON likes\n        FOR EACH ROW\n        EXECUTE PROCEDURE after_insert_like()'
    )
    op.create_entity(public_likes_after_insert_like_trigger)

    public_after_delete_like = PGFunction(
        schema="public",
        signature="after_delete_like()",
        definition="RETURNS TRIGGER AS $$\n        BEGIN\n            UPDATE posts SET likes = likes - 1 WHERE id = OLD.post_id;\n            RETURN OLD;\n        END\n        $$ LANGUAGE 'plpgsql'"
    )
    op.replace_entity(public_after_delete_like)

    public_likes_after_delete_like_trigger = PGTrigger(
        schema="public",
        signature="after_delete_like_trigger",
        on_entity="public.likes",
        is_constraint=False,
        definition='AFTER DELETE ON likes\n        FOR EACH ROW\n        EXECUTE PROCEDURE after_delete_like()'
    )
    op.create_entity(public_likes_after_delete_like_trigger)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_likes_after_delete_like_trigger = PGTrigger(
        schema="public",
        signature="after_delete_like_trigger",
        on_entity="public.likes",
        is_constraint=False,
        definition='AFTER DELETE ON likes\n        FOR EACH ROW\n        EXECUTE PROCEDURE after_delete_like()'
    )
    op.drop_entity(public_likes_after_delete_like_trigger)

    public_after_delete_like = PGFunction(
        schema="public",
        signature="after_delete_like()",
        definition='returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            UPDATE posts as p SET p.likes = p.likes - 1 WHERE p.id = OLD.post_id;\n            RETURN OLD;\n        END\n        $function$'
    )
    op.replace_entity(public_after_delete_like)
    public_likes_after_insert_like_trigger = PGTrigger(
        schema="public",
        signature="after_insert_like_trigger",
        on_entity="public.likes",
        is_constraint=False,
        definition='AFTER INSERT ON likes\n        FOR EACH ROW\n        EXECUTE PROCEDURE after_insert_like()'
    )
    op.drop_entity(public_likes_after_insert_like_trigger)

    public_after_insert_like = PGFunction(
        schema="public",
        signature="after_insert_like()",
        definition='returns trigger\n LANGUAGE plpgsql\nAS $function$\n        BEGIN\n            UPDATE posts as p SET p.likes = p.likes + 1 WHERE p.id = NEW.post_id;\n            RETURN NEW;\n        END\n        $function$'
    )
    op.replace_entity(public_after_insert_like)
    # ### end Alembic commands ###
